{
  "version": 3,
  "sources": ["../../react-layout-masonry/src/Masonry.tsx", "../../react-layout-masonry/src/useMasonry.ts", "../../react-layout-masonry/src/useCoulmnsCount.ts", "../../react-layout-masonry/src/useWindowWidth.ts", "../../react-layout-masonry/src/breakpoints.ts", "../../react-layout-masonry/src/context.ts", "../../react-layout-masonry/src/index.ts"],
  "sourcesContent": ["import { ElementType, ReactElement, forwardRef, useId } from 'react';\n\nimport { MasonryProps, PolymorphicRef } from './types';\nimport useMasonry from './useMasonry';\nimport { MasonryItemContext } from './context';\n\ntype MasonryComponent = <C extends ElementType = 'div'>(props: MasonryProps<C>) => ReactElement<C>;\n\nconst MasonryBase = <T extends ElementType = 'div'>(props: MasonryProps<T>, forwaredRef: PolymorphicRef<T>) => {\n  const { gap, as: Component = 'div', columnProps, columns, ...rest } = props;\n\n  const uniq = useId();\n  const columnsChildren = useMasonry(props.children, columns);\n\n  return (\n    <Component\n      data-masonry-id={`Masonry-${uniq}`}\n      {...rest}\n      style={{ display: 'flex', gap, ...rest.style }}\n      ref={forwaredRef}\n    >\n      {columnsChildren.map((column, index) => {\n        return (\n          <Component\n            key={`Masonry__Column_${uniq}_${index}`}\n            data-masonry-column={index + 1}\n            {...columnProps}\n            style={{\n              display: 'flex',\n              flex: 1,\n              flexDirection: 'column',\n              gap,\n              ...columnProps?.style,\n            }}\n          >\n            {column.map((child, childIndex) => {\n              return (\n                <MasonryItemContext.Provider\n                  value={{ column: index, position: childIndex }}\n                  key={`Masonry__Column_Child_${uniq}_${childIndex}`}\n                >\n                  {child}\n                </MasonryItemContext.Provider>\n              );\n            })}\n          </Component>\n        );\n      })}\n    </Component>\n  );\n};\n\nexport const Masonry = forwardRef(MasonryBase) as MasonryComponent;\n", "import { Children, ReactNode, isValidElement, useMemo } from 'react';\n\nimport useColumnsCount from './useCoulmnsCount';\nimport { Columns } from './types';\n\nconst createEmptyColumns = (count: number): Array<[]> => {\n  return Array.from({ length: count }, () => []);\n};\n\nconst useMasonry = (children: ReactNode, columns?: Columns): ReactNode[][] => {\n  const noOfColumns = useColumnsCount(columns);\n\n  const columnsChildren = useMemo(() => {\n    const group: ReactNode[][] = createEmptyColumns(noOfColumns);\n\n    Children.forEach(children, (child, index) => {\n      if (isValidElement(child)) {\n        group[index % noOfColumns].push(child);\n      }\n    });\n\n    return group;\n  }, [noOfColumns, children]);\n\n  return columnsChildren;\n};\n\nexport default useMasonry;\n", "import { useMemo } from 'react';\n\nimport { Columns } from './types';\nimport useWindowWidth from './useWindowWidth';\nimport findBreakpoint from './breakpoints';\n\nconst DEFAULT_COLUMNS = 3;\n\nconst useColumnsCount = (columns?: Columns): number => {\n  const isResponsive = typeof columns === 'object';\n\n  const windowWidth = useWindowWidth(isResponsive);\n\n  const columnsCount = useMemo(() => {\n    if (!isResponsive) {\n      return columns ?? DEFAULT_COLUMNS;\n    }\n\n    const breakPoint = findBreakpoint(columns, windowWidth);\n    return columns[breakPoint] ?? DEFAULT_COLUMNS;\n  }, [isResponsive, windowWidth, columns]);\n\n  return columnsCount;\n};\n\nexport default useColumnsCount;\n", "import { useCallback, useEffect, useState } from 'react';\n\nconst useWindowWidth = (isResponsive: boolean = true): number => {\n  const [windowWidth, setWindowSize] = useState(window.innerWidth);\n\n  const handleResize = useCallback(() => {\n    setWindowSize(window.innerWidth);\n  }, []);\n\n  useEffect(() => {\n    if (isResponsive) {\n      window.addEventListener('resize', handleResize);\n    } else {\n      window.removeEventListener('resize', handleResize);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [isResponsive, handleResize]);\n\n  return windowWidth;\n};\n\nexport default useWindowWidth;\n", "import { BreakPointSpec, BreakPoints, BreakPointsArray } from './types';\n\nconst defaultBreakpoints = [640, 786, 1024, 1280, 1536];\n\nconst arrayToBreakpoints = (breakPoints: BreakPointsArray): BreakPoints => {\n  return breakPoints.reduce((obj, bpValue, bpIndex) => {\n    if (typeof bpValue !== 'number') {\n      return obj;\n    }\n\n    return {\n      ...obj,\n      ...{ [defaultBreakpoints[bpIndex]]: bpValue },\n    };\n  }, {});\n};\n\nexport const normalizeBreakPoints = (breakPoints: BreakPointSpec): BreakPoints => {\n  if (!Array.isArray(breakPoints)) {\n    return breakPoints;\n  }\n\n  return arrayToBreakpoints(breakPoints);\n};\n\nconst findBreakpoint = (breakpoints: BreakPointSpec, windowWidth: number): number => {\n  const sortedBreakPoints = Object.keys(normalizeBreakPoints(breakpoints))\n    .map(Number)\n    .sort((a, b) => a - b);\n\n  let bp = null;\n\n  for (const breakPoint of sortedBreakPoints) {\n    if (windowWidth > breakPoint) {\n      bp = breakPoint;\n    }\n  }\n\n  return bp ?? sortedBreakPoints[0];\n};\n\nexport default findBreakpoint;\n", "import { createContext, useContext } from 'react';\n\ninterface MasonryItemContextValues {\n  column: number;\n  position: number;\n}\n\nexport const MasonryItemContext = createContext<MasonryItemContextValues>({\n  column: 0,\n  position: 0,\n});\n\nexport const useMasonryItem = (): MasonryItemContextValues => useContext(MasonryItemContext);\n", "import { Masonry } from './Masonry';\nimport useMasonry from './useMasonry';\nimport { useMasonryItem } from './context';\n\nexport * from './types';\nexport { useMasonry, useMasonryItem };\nexport default Masonry;\n"],
  "mappings": "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",
  "names": ["import_react", "useWindowWidth", "isResponsive", "windowWidth", "setWindowSize", "useState", "handleResize", "useCallback", "useEffect", "useWindowWidth_default", "defaultBreakpoints", "arrayToBreakpoints", "breakPoints", "obj", "bpValue", "bpIndex", "normalizeBreakPoints", "findBreakpoint", "breakpoints", "sortedBreakPoints", "a", "b", "bp", "breakPoint", "breakpoints_default", "DEFAULT_COLUMNS", "useColumnsCount", "columns", "useMemo", "_a", "useCoulmnsCount_default", "createEmptyColumns", "count", "useMasonry", "children", "noOfColumns", "group", "Children", "child", "index", "isValidElement", "useMasonry_default", "MasonryItemContext", "createContext", "useMasonryItem", "useContext", "MasonryBase", "props", "forwaredRef", "gap", "Component", "columnProps", "rest", "uniq", "useId", "columnsChildren", "jsx", "column", "childIndex", "Masonry", "forwardRef", "src_default"]
}
